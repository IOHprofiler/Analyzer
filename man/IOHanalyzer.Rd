% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IOHanalyzer.R
\docType{package}
\name{IOHanalyzer}
\alias{IOHanalyzer}
\alias{IOHanalyzer-package}
\title{is.wholenumber <-
  function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol}
\description{
#' Set the value of some global IOHanalyzer properties
#' 
#' @param prop_name The property to set. Current options are:
#' \itemize{
#' \item 'probs': The probabilities in the displayed quantiles (RT and FV summaries). Needs a vector of probabilities
#' \item 'max_samples': The maximum number of samples to generate for each algorithm. Needs a single integer
#' }
#' @param value The value to set the property to
#' @param ... Addition arguments
#' 
#' @export
#' @examples 
#' set_property("probs",c(0.1,0.25,0.5,0.75,0.9))
set_property <- function(prop_name, value, ...){
    switch(prop_name, 
        "probs" = {
            req(length(value) > 0 && !any(value >= 1 | value <= 0))
            IOHanalyzer_env$probs <- value
            IOHanalyzer_env$D_quantile <- function(x, pct = IOHanalyzer_env$probs) quantile(x, pct, names = F, type = 3, na.rm = T)
            IOHanalyzer_env$C_quantile <- function(x, pct = IOHanalyzer_env$probs) quantile(x, pct, names = F, na.rm = T)
        },
        "max_samples" = {
            req(is.wholenumber(value))
            IOHanalyzer_env$max_samples <- value
        },
        "backend" = {
          req(value %in% c('plotly', 'ggplot2'))
          IOHanalyzer_env$default_backend <- value
        },
        "colorscheme" = {
          set_colorScheme(value, ...)
        }
    )
}
}
\details{
#' Get the value of some global IOHanalyzer properties
#' 
#' @param prop_name The property to get. Current options are:
#' \itemize{
#' \item 'probs': The probabilities in the displayed quantiles (RT and FV summaries).
#' \item 'max_samples': The maximum number of samples to generate for each algorithm.
#' }
#' @param ... Arguments passed to underlying functions (i.e. number of colors to get colorscheme for)
#' 
#' @export
#' @examples 
#' get_property("probs")
get_property <- function(prop_name, ...){
    switch(prop_name, 
        "probs" = {
            IOHanalyzer_env$probs
        },
        "max_samples" = {
            IOHanalyzer_env$max_samples
        },
        "backend" = {
          IOHanalyzer_env$default_backend
        },
        "colorscheme" = {
          IOHanalyzer_env$used_colorscheme(...)
        }
    )
}
IOHanalyzer: Data Analysis Part of IOHprofiler

The data analysis module for the Iterative Optimization Heuristics Profiler (IOHprofiler).
This module provides statistical analysis methods for the benchmark data generated by
optimization heuristics, which can be visualized through a
web-based interface. The benchmark data is usually generated by the
experimentation module, called IOHexperimenter. IOHanalyzer also supports
the widely used COCO (Comparing Continuous Optimisers) data format for benchmarking.
}
\section{Functions}{

The IOHanalyzer consists of 3 main functionalities:
\itemize{
\item Reading and alligning data from different heuristics, such as IOHExperimenter.
This is done using the \code{\link{DataSet}} and \code{\link{DataSetList}} functions
\item Processing and summarizing this data
\item Creating various plots
}
}

\examples{
path <- system.file("extdata", "ONE_PLUS_LAMDA_EA", package="IOHanalyzer")
dsList <- DataSetList(path)
summary(dsList)
Plot.RT.Single_Func(dsList[1])

\donttest{
runServer()
}
}
